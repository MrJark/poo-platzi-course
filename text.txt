
La Programación Orientada a Objetos viene de una filosofía o forma de pensar que es la Orientación a Objetos y esto surge a partir de los problemas que necesitamos plasmar en código.

Es analizar un problema en forma de objetos para después llevarlo a código, eso es la Orientación a Objetos.
La POO nos permite: 
    Porgramar más rápido
    Dejar de ser un Jr
    No copiar y pegar código

Un paradigma es una teoría que suministra la base y modelo para resolver problemas. La paradigma de Programación Orientada a Objetos se compone de 4 elementos:

- Clases
- Propiedades
- Métodos
- Objetos

Y 4 Pilares:

- Encapsulamiento: Ocultar datos mediante código
- Abstracción: Representación de los objetos mediante el código.
- Herencia: Es la creación de nuevas clases a partir de una ya existente
- Polimorfismo:  Propiedad por la que es posible enviar mensajes sintácticamente iguales a objetos de tipos distintos

Lenguajes de Programación: JS, Python, Java, PHP, Ruby, C#

Diagramas de Modelado

Nos permiten plasmar de forma gráfica a través de diagramas nuestro análisis. Servirá de intermediario para poder entender el problema y la solución con la orientación a objetos. Existen dos herramientas de diagramación:
    - OMT (Object Modeling Techniques)
    Metodología que se basa estrictamente en identificar los objetos, sus métodos, sus atributos y cuales son las relaciones que tienen. Pero ya está descontinuada.
    - UML (Unified Modeling Languaje)
    Toma todas las bases y técnicas del OMT, las unifica y permite una ampliación de apicaciones, no solo objetos y clases. Sino que incluye casos de uso, actividades, iteración, estados e implementación.

Trabajando con UML -> Vamos a trabajar de una manera gráfica 

    CLASES:
    En la parte superior se colocan los atributos o propiedades, y debajo las operaciones de la clase. Notarás que el primer caracter con el que empiezan es un símbolo. Este denotará la visibilidad del atributo o método, esto es un término que tiene que ver con Encapsulamiento.
    Modos de visualización:
        - private
        + public
        # protected
        ~ default
    
    ASOCIACIONES:
    Cuando aparezca una flecha ( → ) de un objeto a otro, significa que al que señala lo está conteniendo 

    HERENCIAS:
    Y si la flecha es hacia arriba o hacia abajo( ↑↓ ), significa que de donde sale, está herendando la propiedad del que apunta

    AGREGACIÓN:
    Es similar a la asociación pero en este caso dependerá de varios elemento y no de uno solo. Se representa como una flecha pero en la punta tiene un rombo sin relleno ( <>-- )

    COMPOSICIÓN:
    Similar a la agregación pero está reprensentado con la misma señal pero con el rombo pintado de negro ( <>-- ) y significa que no podría existir sin los demás

Los objetos tienen Propiedaes y Comportamientos. Los objetos pueden ser de dos tipos:
    - Físicos: aquellos que se pueden tocar, como un Usuario
    - Conceptuales: como la sesión de un usuario 
Las Propiedades pueden llamarse atributos y son 'sustantivos', es decir, nombre, tamaño, forma, son todas las características del objeto
Los Comportamientos son todas aquellas operaciones que el objeto puede hacer, suelen ser un 'verbo' o un 'sustantivo' y un 'verbo', un ejemplo de esto puede ser que el usuario haga log-in, log-out, share

Una Clase es el modelo por el cual nuestros objetos se van a construir y nos van a permitir generar más objetos
La Abstracción es cuando separamos los datos de un objeto para generar un molde.

La Modularidad va muy relacionada con las clases y es un principio de la Programación Orientado a Objetos y va de la mano con el Diseño Modular que significa dividir un sistema en partes pequeñas y estas serán nuestros módulos pudiendo funcionar de manera independiente.
La modularidad de nuestro código nos va a permitir: 
    - Reutilizar
    - Evitar colapsos
    - Hacer nuestro código más mantenible
    - Legibilidad
    - Resolución rápida de problemas
Una buena práctica es separando las clases en archivos diferentes.

Sintaxtis y clases de UML

Las clases se identifican en cajas de la siguinete manera:
    -Nombre de la clase -> Indentidad
    -Los distintos atributos -> Estado 
    -Las distintas operaciones -> Comportamientos
Definición de las clases en los distintos lenguajes de programación:

    -Java -> class Person {}
    -Python -> calss Person:
    -JS -> function Person () {}
    -PHP -> class Person {}

Definición de las clases y sus métodos en los distintos lenguajes de programación:

    -Java -> class Person {
                String name = " ";
                void walk (){} 
            }

    -Python -> calss Person: 
                    name = " ";
                    def walk ();

    -JS -> Person.prototype.walk = function () { }
    -PHP -> class Person {
                $name = " ";
                function walk () {}
            }

Herencia

Don’t repeat yourself es una filosofía que promueve la reducción de duplicación en programación, esto nos va a inculcar que no tengamos líneas de código duplicadas
La herencia nos permite crear nuevas clases a partir de otras, se basa en modelos y conceptos de la vida real. Tenemos una jerarquía de padre e hijo.

La clase padre también se le puede llamar superclase y a los hijos como subclases

Construcción de los objetos en los distintos lenguajes

    -Java -> Person person = new Person();
    -Python -> persona = Person()
    -JS -> var person = new Person();
    -PHP -> $person = new Person();

Métodos constructores para cada una de sus clases en los distintos lenguages

    -Java -> pucblic Person(String name) {
                this.name = name;
            }

    -Python -> def__init__(self, name):
                self.name = name 

    -JS -> function Person (name) {
                this.name = name 
            }

    -PHP -> public function _constructor($name) {
                $this->name = name;
            }

Sintaxis de las herencias en los distintos lenguages
 
    -Java -> class Student extends Person //es la sintaxis extend lo que me dice que es herencia
    -Python -> class Student(Person):
    -JS -> student.prototype = new Person ();
    -PHP -> class Student extends Person // la el extend lo que me dice que es herencia

El Encapsulamiento es hacer que un dato sea inviolable, inalterable cuando se le asigne un modificador de acceso
Hay varios tipos: 
    -public
    -protected
    -default
    -private

El polimorfismo, muchas formas, es construeir métodos con el mismo nombre pero con el comportamiento diferente. Un ejemplo con Uber serían los distintos tipo de Uber que hay, UberBlack, UberX, Uber Van, et.